{
  "cells": [
    {
      "cell_type": "code",
      "source": [
        "import spotipy as spy\n",
        "import pandas as pd\n",
        "import time\n",
        "import csv"
      ],
      "outputs": [],
      "execution_count": 1,
      "metadata": {
        "gather": {
          "logged": 1648885810722
        }
      },
      "id": "fb3e7658-5b71-4a4c-8674-efa5ff247ff0"
    },
    {
      "cell_type": "code",
      "source": [
        "with open('secret.txt') as s:\n",
        "    client_secret = s.read()\n",
        "print(client_secret)\n",
        "client_id = '339e9f02e5254f07a945aef3f9471a31'\n",
        "user = 'zurxor'\n",
        "playlist_uri = 'spotify:playlist:4o8NBsWreC3OnKePUYw0dg'"
      ],
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": "1e6c6781a6e348368b2364cb398836db\n"
        }
      ],
      "execution_count": 6,
      "metadata": {
        "gather": {
          "logged": 1648885984408
        }
      },
      "id": "a018f463-417c-4b83-9142-7dd9d0c1aae2"
    },
    {
      "cell_type": "code",
      "source": [
        "credentials_manager = spy.oauth2.SpotifyClientCredentials(client_id, client_secret)\n",
        "sp = spy.Spotify(client_credentials_manager=credentials_manager)"
      ],
      "outputs": [],
      "execution_count": null,
      "metadata": {},
      "id": "6453e976-e183-4f66-b807-4d6577554309"
    },
    {
      "cell_type": "code",
      "source": [
        "list = sp.user_playlist(user, playlist_uri)"
      ],
      "outputs": [],
      "execution_count": null,
      "metadata": {},
      "id": "fbbb2a97-07a5-45ed-a380-a95a0520d1a6"
    },
    {
      "cell_type": "code",
      "source": [
        "ids = []\n",
        "for item in list['tracks']['items']:\n",
        "    track = item['track']\n",
        "    ids.extend([track['id']])"
      ],
      "outputs": [],
      "execution_count": null,
      "metadata": {},
      "id": "1916d995-2737-4411-b42b-f635a869185a"
    },
    {
      "cell_type": "code",
      "source": [
        "if len(list) != len(set(list)):\n",
        "    print(\"Duplicates found\")\n",
        "else:\n",
        "    print(\"No duplicates\")"
      ],
      "outputs": [],
      "execution_count": null,
      "metadata": {},
      "id": "fae17ef7-e9de-4bde-a7ef-9f3a328403de"
    },
    {
      "cell_type": "code",
      "source": [
        "f = open('Users/aleksius.kurkela/JohdatusDatatieteisiinHarjoitustyo/ids.csv', 'w')\n",
        "writer = csv.writer(f)\n",
        "writer.writerow([\"track id\"])\n",
        "for i in range(len(ids)):\n",
        "    writer.writerow([ids[i]])\n",
        "    n = n + 1\n",
        "f.close()"
      ],
      "outputs": [],
      "execution_count": null,
      "metadata": {},
      "id": "2dc6ac16-e750-4d9f-891a-df7c656688a6"
    },
    {
      "cell_type": "code",
      "source": [
        "f = open('Users/aleksius.kurkela/JohdatusDatatieteisiinHarjoitustyo/trackdata.csv', 'w')\n",
        "writer = csv.writer(f)\n",
        "writer.writerow([\"name\", \"length\", \"popularity\",'acousticness','danceability','energy','instrumentalness','liveness','loudness', 'speechiness','tempo','time_signature'])\n",
        "for i in range(len(ids)):\n",
        "    track = []\n",
        "    time.sleep(.5)\n",
        "    metadata = sp.track(ids[i])\n",
        "    features = sp.audio_features(ids[i])\n",
        "    name = metadata['name']\n",
        "    length = metadata['duration_ms']\n",
        "    popularity = metadata['popularity']\n",
        "    \n",
        "    ac = features[0]['acousticness']\n",
        "    dc = features[0]['danceability']\n",
        "    en = features[0]['energy']\n",
        "    ins = features[0]['instrumentalness']\n",
        "    liv = features[0]['liveness']\n",
        "    lou = features[0]['loudness']\n",
        "    spe = features[0]['speechiness']\n",
        "    tmp = features[0]['tempo']\n",
        "    ts = features[0]['time_signature']\n",
        "    track = [name, length, popularity, ac, dc, en, ins, liv, lou, spe, tmp, ts]\n",
        "    writer.writerow(track)\n",
        "f.close()"
      ],
      "outputs": [],
      "execution_count": null,
      "metadata": {},
      "id": "e6185eec-b990-4463-8344-df88477f388c"
    },
    {
      "cell_type": "code",
      "source": [],
      "outputs": [],
      "execution_count": null,
      "metadata": {},
      "id": "15de2dfe-9516-4aba-93cb-30f2728d038a"
    },
    {
      "cell_type": "code",
      "source": [],
      "outputs": [],
      "execution_count": null,
      "metadata": {},
      "id": "7b19a260-5e2a-47bb-bbc0-629bdad8e773"
    }
  ],
  "metadata": {
    "kernelspec": {
      "name": "python38-azureml",
      "language": "python",
      "display_name": "Python 3.8 - AzureML"
    },
    "language_info": {
      "name": "python",
      "version": "3.8.1",
      "mimetype": "text/x-python",
      "codemirror_mode": {
        "name": "ipython",
        "version": 3
      },
      "pygments_lexer": "ipython3",
      "nbconvert_exporter": "python",
      "file_extension": ".py"
    },
    "kernel_info": {
      "name": "python38-azureml"
    },
    "nteract": {
      "version": "nteract-front-end@1.0.0"
    }
  },
  "nbformat": 4,
  "nbformat_minor": 5
}